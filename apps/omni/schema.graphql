interface Watchable {
  title: String!
  posterUrl: String
  overview: String
  id: ID!
  backdropUrl: String
  popularity: Float
  matches: [User] # Followers that have this movie watchlisted
  genres: [Genre]
  tmdbVoteAverage: Float
  tmdbVoteCount: Int
  tagline: String
  homepage: String
  type: WatchableType!
}

enum WatchableType {
  MOVIE
  SERIES
}

type Series implements Watchable {
  title: String!
  posterUrl: String
  overview: String
  id: ID!
  backdropUrl: String
  popularity: Float
  matches: [User] # Followers that have this movie watchlisted
  genres: [Genre]
  tmdbVoteAverage: Float
  tmdbVoteCount: Int
  tagline: String
  homepage: String
  type: WatchableType!

  seasons: Int
}

type Movie implements Watchable {
  title: String!
  posterUrl: String
  overview: String
  id: ID!
  backdropUrl: String
  popularity: Float
  matches: [User] # Followers that have this movie watchlisted
  genres: [Genre]
  tmdbVoteAverage: Float
  tmdbVoteCount: Int
  tagline: String
  homepage: String
  type: WatchableType!

  adult: Boolean
  releaseDate: String
  originalTitle: String
  budget: Int
  revenue: Int
  runtime: Int
  imdbId: String

  streamProviders: [WatchProvider]
  buyProviders: [WatchProvider]
  rentProviders: [WatchProvider]
  trailer: Trailer
  inWatchlist: Boolean
}

type Trailer {
  key: String
  provider: VideoProvider
}

enum VideoProvider {
  YouTube
}

type User {
  id: ID!
  name: String!
  image: String
  email: String!
  matches: [Movie]
  isFollowing: Boolean
  isFollower: Boolean
  followers: [User]
  following: [User]
  watchlist: [Movie]
  isBot: Boolean!
}

type WatchProvider {
  id: ID!
  displayPriority: Int
  name: String
  logoPath: String
}

type Genre {
  id: ID!
  name: String!
}

type Query {
  user(id: ID!): User
  bots: [User]
  movie(id: ID!): Movie
  watchlist(offset: Int, limit: Int): [Movie]
  moviesByGenre(genreId: ID!, offset: Int, limit: Int): [Movie]
  search(query: String!, offset: Int, limit: Int): [Movie]
  searchUsers(nameQuery: String!): [User]
  genre(genreId: ID!): Genre
  genres: [Genre]
  moviesForYou(offset: Int, limit:Int): [Movie]
  popularMovies(offset: Int, limit:Int): [Movie]
}

type Mutation {
  addMovieToWatchlist(movieId: ID!): Movie
  removeMovieFromWatchlist(movieId: ID!): Movie
  follow(friendId: ID!): User
  unfollow(friendId: ID!): User
}
